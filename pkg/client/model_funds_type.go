/*
BAI2 API

Moov Bai2 ([Automated Clearing House](https://en.wikipedia.org/wiki/Automated_Clearing_House)) implements an HTTP API for creating, parsing and validating Bais files. BAI2- a widely accepted and used Bank Statement Format for Bank Reconciliation.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// FundsType struct for FundsType
type FundsType struct {
	TypeCode *string `json:"type_code,omitempty"`
	Date     *string `json:"date,omitempty"`
}

// NewFundsType instantiates a new FundsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFundsType() *FundsType {
	this := FundsType{}
	return &this
}

// NewFundsTypeWithDefaults instantiates a new FundsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFundsTypeWithDefaults() *FundsType {
	this := FundsType{}
	return &this
}

// GetTypeCode returns the TypeCode field value if set, zero value otherwise.
func (o *FundsType) GetTypeCode() string {
	if o == nil || o.TypeCode == nil {
		var ret string
		return ret
	}
	return *o.TypeCode
}

// GetTypeCodeOk returns a tuple with the TypeCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundsType) GetTypeCodeOk() (*string, bool) {
	if o == nil || o.TypeCode == nil {
		return nil, false
	}
	return o.TypeCode, true
}

// HasTypeCode returns a boolean if a field has been set.
func (o *FundsType) HasTypeCode() bool {
	if o != nil && o.TypeCode != nil {
		return true
	}

	return false
}

// SetTypeCode gets a reference to the given string and assigns it to the TypeCode field.
func (o *FundsType) SetTypeCode(v string) {
	o.TypeCode = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *FundsType) GetDate() string {
	if o == nil || o.Date == nil {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FundsType) GetDateOk() (*string, bool) {
	if o == nil || o.Date == nil {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *FundsType) HasDate() bool {
	if o != nil && o.Date != nil {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *FundsType) SetDate(v string) {
	o.Date = &v
}

func (o FundsType) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TypeCode != nil {
		toSerialize["type_code"] = o.TypeCode
	}
	if o.Date != nil {
		toSerialize["date"] = o.Date
	}
	return json.Marshal(toSerialize)
}

type NullableFundsType struct {
	value *FundsType
	isSet bool
}

func (v NullableFundsType) Get() *FundsType {
	return v.value
}

func (v *NullableFundsType) Set(val *FundsType) {
	v.value = val
	v.isSet = true
}

func (v NullableFundsType) IsSet() bool {
	return v.isSet
}

func (v *NullableFundsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFundsType(val *FundsType) *NullableFundsType {
	return &NullableFundsType{value: val, isSet: true}
}

func (v NullableFundsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFundsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
