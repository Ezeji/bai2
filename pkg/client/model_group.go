/*
BAI2 API

Moov Bai2 ([Automated Clearing House](https://en.wikipedia.org/wiki/Automated_Clearing_House)) implements an HTTP API for creating, parsing and validating Bais files. BAI2- a widely accepted and used Bank Statement Format for Bank Reconciliation.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the Group type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Group{}

// Group struct for Group
type Group struct {
	Receiver          *string   `json:"receiver,omitempty"`
	Originator        *string   `json:"originator,omitempty"`
	GroupStatus       *int32    `json:"groupStatus,omitempty"`
	AsOfDate          *string   `json:"asOfDate,omitempty"`
	CurrencyCode      *string   `json:"currencyCode,omitempty"`
	GroupControlTotal *string   `json:"groupControlTotal,omitempty"`
	NumberOfAccounts  *int32    `json:"numberOfAccounts,omitempty"`
	NumberOfRecords   *int32    `json:"numberOfRecords,omitempty"`
	Accounts          []Account `json:"Accounts,omitempty"`
}

// NewGroup instantiates a new Group object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroup() *Group {
	this := Group{}
	return &this
}

// NewGroupWithDefaults instantiates a new Group object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupWithDefaults() *Group {
	this := Group{}
	return &this
}

// GetReceiver returns the Receiver field value if set, zero value otherwise.
func (o *Group) GetReceiver() string {
	if o == nil || IsNil(o.Receiver) {
		var ret string
		return ret
	}
	return *o.Receiver
}

// GetReceiverOk returns a tuple with the Receiver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetReceiverOk() (*string, bool) {
	if o == nil || IsNil(o.Receiver) {
		return nil, false
	}
	return o.Receiver, true
}

// HasReceiver returns a boolean if a field has been set.
func (o *Group) HasReceiver() bool {
	if o != nil && !IsNil(o.Receiver) {
		return true
	}

	return false
}

// SetReceiver gets a reference to the given string and assigns it to the Receiver field.
func (o *Group) SetReceiver(v string) {
	o.Receiver = &v
}

// GetOriginator returns the Originator field value if set, zero value otherwise.
func (o *Group) GetOriginator() string {
	if o == nil || IsNil(o.Originator) {
		var ret string
		return ret
	}
	return *o.Originator
}

// GetOriginatorOk returns a tuple with the Originator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetOriginatorOk() (*string, bool) {
	if o == nil || IsNil(o.Originator) {
		return nil, false
	}
	return o.Originator, true
}

// HasOriginator returns a boolean if a field has been set.
func (o *Group) HasOriginator() bool {
	if o != nil && !IsNil(o.Originator) {
		return true
	}

	return false
}

// SetOriginator gets a reference to the given string and assigns it to the Originator field.
func (o *Group) SetOriginator(v string) {
	o.Originator = &v
}

// GetGroupStatus returns the GroupStatus field value if set, zero value otherwise.
func (o *Group) GetGroupStatus() int32 {
	if o == nil || IsNil(o.GroupStatus) {
		var ret int32
		return ret
	}
	return *o.GroupStatus
}

// GetGroupStatusOk returns a tuple with the GroupStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetGroupStatusOk() (*int32, bool) {
	if o == nil || IsNil(o.GroupStatus) {
		return nil, false
	}
	return o.GroupStatus, true
}

// HasGroupStatus returns a boolean if a field has been set.
func (o *Group) HasGroupStatus() bool {
	if o != nil && !IsNil(o.GroupStatus) {
		return true
	}

	return false
}

// SetGroupStatus gets a reference to the given int32 and assigns it to the GroupStatus field.
func (o *Group) SetGroupStatus(v int32) {
	o.GroupStatus = &v
}

// GetAsOfDate returns the AsOfDate field value if set, zero value otherwise.
func (o *Group) GetAsOfDate() string {
	if o == nil || IsNil(o.AsOfDate) {
		var ret string
		return ret
	}
	return *o.AsOfDate
}

// GetAsOfDateOk returns a tuple with the AsOfDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetAsOfDateOk() (*string, bool) {
	if o == nil || IsNil(o.AsOfDate) {
		return nil, false
	}
	return o.AsOfDate, true
}

// HasAsOfDate returns a boolean if a field has been set.
func (o *Group) HasAsOfDate() bool {
	if o != nil && !IsNil(o.AsOfDate) {
		return true
	}

	return false
}

// SetAsOfDate gets a reference to the given string and assigns it to the AsOfDate field.
func (o *Group) SetAsOfDate(v string) {
	o.AsOfDate = &v
}

// GetCurrencyCode returns the CurrencyCode field value if set, zero value otherwise.
func (o *Group) GetCurrencyCode() string {
	if o == nil || IsNil(o.CurrencyCode) {
		var ret string
		return ret
	}
	return *o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetCurrencyCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CurrencyCode) {
		return nil, false
	}
	return o.CurrencyCode, true
}

// HasCurrencyCode returns a boolean if a field has been set.
func (o *Group) HasCurrencyCode() bool {
	if o != nil && !IsNil(o.CurrencyCode) {
		return true
	}

	return false
}

// SetCurrencyCode gets a reference to the given string and assigns it to the CurrencyCode field.
func (o *Group) SetCurrencyCode(v string) {
	o.CurrencyCode = &v
}

// GetGroupControlTotal returns the GroupControlTotal field value if set, zero value otherwise.
func (o *Group) GetGroupControlTotal() string {
	if o == nil || IsNil(o.GroupControlTotal) {
		var ret string
		return ret
	}
	return *o.GroupControlTotal
}

// GetGroupControlTotalOk returns a tuple with the GroupControlTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetGroupControlTotalOk() (*string, bool) {
	if o == nil || IsNil(o.GroupControlTotal) {
		return nil, false
	}
	return o.GroupControlTotal, true
}

// HasGroupControlTotal returns a boolean if a field has been set.
func (o *Group) HasGroupControlTotal() bool {
	if o != nil && !IsNil(o.GroupControlTotal) {
		return true
	}

	return false
}

// SetGroupControlTotal gets a reference to the given string and assigns it to the GroupControlTotal field.
func (o *Group) SetGroupControlTotal(v string) {
	o.GroupControlTotal = &v
}

// GetNumberOfAccounts returns the NumberOfAccounts field value if set, zero value otherwise.
func (o *Group) GetNumberOfAccounts() int32 {
	if o == nil || IsNil(o.NumberOfAccounts) {
		var ret int32
		return ret
	}
	return *o.NumberOfAccounts
}

// GetNumberOfAccountsOk returns a tuple with the NumberOfAccounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetNumberOfAccountsOk() (*int32, bool) {
	if o == nil || IsNil(o.NumberOfAccounts) {
		return nil, false
	}
	return o.NumberOfAccounts, true
}

// HasNumberOfAccounts returns a boolean if a field has been set.
func (o *Group) HasNumberOfAccounts() bool {
	if o != nil && !IsNil(o.NumberOfAccounts) {
		return true
	}

	return false
}

// SetNumberOfAccounts gets a reference to the given int32 and assigns it to the NumberOfAccounts field.
func (o *Group) SetNumberOfAccounts(v int32) {
	o.NumberOfAccounts = &v
}

// GetNumberOfRecords returns the NumberOfRecords field value if set, zero value otherwise.
func (o *Group) GetNumberOfRecords() int32 {
	if o == nil || IsNil(o.NumberOfRecords) {
		var ret int32
		return ret
	}
	return *o.NumberOfRecords
}

// GetNumberOfRecordsOk returns a tuple with the NumberOfRecords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetNumberOfRecordsOk() (*int32, bool) {
	if o == nil || IsNil(o.NumberOfRecords) {
		return nil, false
	}
	return o.NumberOfRecords, true
}

// HasNumberOfRecords returns a boolean if a field has been set.
func (o *Group) HasNumberOfRecords() bool {
	if o != nil && !IsNil(o.NumberOfRecords) {
		return true
	}

	return false
}

// SetNumberOfRecords gets a reference to the given int32 and assigns it to the NumberOfRecords field.
func (o *Group) SetNumberOfRecords(v int32) {
	o.NumberOfRecords = &v
}

// GetAccounts returns the Accounts field value if set, zero value otherwise.
func (o *Group) GetAccounts() []Account {
	if o == nil || IsNil(o.Accounts) {
		var ret []Account
		return ret
	}
	return o.Accounts
}

// GetAccountsOk returns a tuple with the Accounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetAccountsOk() ([]Account, bool) {
	if o == nil || IsNil(o.Accounts) {
		return nil, false
	}
	return o.Accounts, true
}

// HasAccounts returns a boolean if a field has been set.
func (o *Group) HasAccounts() bool {
	if o != nil && !IsNil(o.Accounts) {
		return true
	}

	return false
}

// SetAccounts gets a reference to the given []Account and assigns it to the Accounts field.
func (o *Group) SetAccounts(v []Account) {
	o.Accounts = v
}

func (o Group) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Group) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Receiver) {
		toSerialize["receiver"] = o.Receiver
	}
	if !IsNil(o.Originator) {
		toSerialize["originator"] = o.Originator
	}
	if !IsNil(o.GroupStatus) {
		toSerialize["groupStatus"] = o.GroupStatus
	}
	if !IsNil(o.AsOfDate) {
		toSerialize["asOfDate"] = o.AsOfDate
	}
	if !IsNil(o.CurrencyCode) {
		toSerialize["currencyCode"] = o.CurrencyCode
	}
	if !IsNil(o.GroupControlTotal) {
		toSerialize["groupControlTotal"] = o.GroupControlTotal
	}
	if !IsNil(o.NumberOfAccounts) {
		toSerialize["numberOfAccounts"] = o.NumberOfAccounts
	}
	if !IsNil(o.NumberOfRecords) {
		toSerialize["numberOfRecords"] = o.NumberOfRecords
	}
	if !IsNil(o.Accounts) {
		toSerialize["Accounts"] = o.Accounts
	}
	return toSerialize, nil
}

type NullableGroup struct {
	value *Group
	isSet bool
}

func (v NullableGroup) Get() *Group {
	return v.value
}

func (v *NullableGroup) Set(val *Group) {
	v.value = val
	v.isSet = true
}

func (v NullableGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroup(val *Group) *NullableGroup {
	return &NullableGroup{value: val, isSet: true}
}

func (v NullableGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
